local h_str = require "modules.h_str"
local utility = require "modules.utility"
local persist = require "modules.persist"

local world
local level

local current_x
local current_y

local level_objects

local function break_brittle()
	
end

local function unload_level()
	go.delete(level_objects)
	level = nil
	level_objects = nil
end

local function load_level_absolute(world_x, world_y)
	current_x = world_x
	current_y = world_y
	local level_id = world.layout[utility.index_1D(current_x, current_y, world.width, world.height)]
	level = persist.get_level(level_id)
	level_objects = collectionfactory.create(msg.url(nil, hash("/factory_level"), "collectionfactory_level_" .. level_id))
	go.set_position(vmath.vector3((level.start_x - 1) * 8 + 4, (level.start_y - 1) * 8 + 4, 0), hash("/player"))
end

local function load_level_relative(direction)
	local player_position = go.get_position(hash("/player"))
	if direction == 1 then
		current_y = current_y - 1
		player_position.y = 4
		go.set_position(player_position, hash("/player"))
	elseif direction == 2 then
		current_x = current_x - 1
		player_position.x = 156
		go.set_position(player_position, hash("/player"))
	elseif direction == 3 then
		current_y = current_y + 1
		player_position.y = 116
		go.set_position(player_position, hash("/player"))
	elseif direction == 4 then
		current_x = current_x + 1
		player_position.x = 4
		go.set_position(player_position, hash("/player"))
	end
	local level_id = world.layout[utility.index_1D(current_x, current_y, world.width, world.height)]
	level = persist.get_level(level_id)
	level_objects = collectionfactory.create(msg.url(nil, hash("/factory_level"), "collectionfactory_level_" .. level_id))
end

local function load_world()
	world = persist.get_world()
end

function init(self)
	load_world()
	load_level_absolute(world.start_x, world.start_y)
end

function on_message(self, message_id, message, sender)
	if message_id == h_str.message_break_brittle then
		break_brittle()
	elseif message_id == h_str.message_load_level_relative then
		unload_level()
		load_level_relative(message.direction)
	end
end