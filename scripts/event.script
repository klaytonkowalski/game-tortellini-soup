----------------------------------------------------------------------
-- DEPENDENCIES
----------------------------------------------------------------------

local h_str = require "modules.h_str"

----------------------------------------------------------------------
-- PROPERTIES
----------------------------------------------------------------------

local current_event
local current_input
local current_instruction

----------------------------------------------------------------------
-- LOCAL FUNCTIONS
----------------------------------------------------------------------

local function command_pause(seconds)
	local done = false
	timer.delay(seconds, false, function()
		done = true
	end)
	while not done do
		coroutine.yield()
	end
end

local command_map =
{
	pause = command_pause
}

local function start(id)
	if not current_event then
		local data, error = sys.load_resource("/assets/events/" .. id .. ".json")
		if data then
			local json_data
			if pcall(function() json_data = json.decode(data) end) then
				current_event = coroutine.create(function()
					current_instruction = 1
					while current_instruction <= #json_data do
						local json_entry = json_data[current_instruction]
						if command_map[json_entry[1]] then
							if #json_entry > 1 then
								command_map[json_entry[1]](unpack(json_entry[2]))
							else
								command_map[json_entry[1]]()
							end
						end
						current_instruction = current_instruction + 1
					end
				end)
			end
		elseif error then
			pprint(error)
		end
	end
end

----------------------------------------------------------------------
-- ENGINE FUNCTIONS
----------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), h_str.acquire_input_focus)
end

function update(self, dt)
	if current_event then
		coroutine.resume(current_event)
		if coroutine.status(current_event) == "dead" then
			current_event = nil
			current_input = nil
			current_instruction = nil
		end
	end
end

function on_input(self, action_id, action)
	if current_event and action.pressed then
		current_input = action_id
	end
end

function on_message(self, message_id, message, sender)
	if message_id == h_str.message_start_event then
		start(message.id)
	end
end